; PORTK is where the LCD is connected.
; PORTK is $0032
; DDRK	is $0033

; Registers
PORTK		EQU			$32
DDRK		EQU			$33

; Masks
ENABLE		EQU			%00000010 		; ENABLE BIT FOR ENABLE ON/OFF PULSES
OUTPUT		EQU			%11111111		; MAKE PORT OUTPUT

; CONSTANTS
MSEC		EQU			$1770			; 6000 (=$1770) LOOPS = 1 MSEC IN STARTX LOOP.
STACK		EQU			$3C00

 
; Instructions
;CLEAR		EQU			$01
;RETURN		EQU			$

;LCD INITIALIZATION STRINGS
INIT_LCD1	EQU			$0C				;FIRST INIT STRING, WRITE 3 TIMES TO LCD ON STARTUP.
INIT_LCD2	EQU			$08				; SET TO 4 BIT TRANSFER
INIT_LCD3	EQU			$08				; SET TO 2 LINES, 5X7 DOTS, 4 MSB OF 8 BITS
INIT_LCD4	EQU			$20				; SET TO 2 LINES, 5X7 DOTS, 4 LSB OF 8 BITS
INIT_LCD5	EQU			$00				; DISPLAY OFF, 4 MSB
INIT_LCD6	EQU 		$20				; DISPLAY OFF, 4 LSB
INIT_LCD7	EQU			$00				; DISPLAY CLEAR, 4 MSB
INIT_LCD8	EQU			$04				; DISPLAY CLEAR, 4 LSB
INIT_LCD9	EQU			$00				; ENTRY MODE 4 MSB	
INIT_LCD10	EQU			$18				; ENTRY MODE 4 LSB (INCREMENT DDRAM, CURSOR MOVES)
INIT_LCD11	EQU			$00				; DISPLAY ON, 4 MSB
INIT_LCD12	EQU			$3C				; DISPLAY ON, 4 LSB

			LDS			#STACK
			MOVB		#OUTPUT,DDRK 	; CONFIGURE PORT K FOR OUTPUT.
			JSR 		LCD_INIT
			
			

START		clr			LCD_CTRL
			clr			LCD_DATA
			MOVB		#$FF,DDR

			
; DELAY 20 MSEC AFTER POWER ON. 
LCD_INIT	LDD			#$14
			JSR			DELAY
			
			; WRITE FIRST INIT STRING THREE TIMES WITH VARIOUS DELAYS.
			MOVB		#INIT_LCD1,PORTK
			; WRITE 1/ DELAY 1.
			JSR 		ENABLE_PULSE	; PULSE DATA IN PORT K TO WRITE TO IT.
			LDD			#$05			; WAIT 5 MSEC
			JSR			DELAY
			; WRITE 2/ DELAY 2.
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR 		DELAY
			; WRITE 3/ NO DELAY NEEDED
			JSR 		ENABLE_PULSE
			
			; FINAL INIT VALUES.
			; WAIT > 1 MSEC BETWEEN EACH WRITE (> 40 USEC DELAY NEEDED).
			
			; SET TO 4 BIT TRANSFERS, ONLY ONE 4 BIT WRITE NEEDED.
			MOVB		#INIT_LCD2,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			
			; SET TO 2 LINES, 5X7 DOT CHARACTER DISPLAY, 2 4BIT WRITES NEEDED.
			; 4 MSB.
			MOVB		#INIT_LCD3,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			; 4 LSB.
			MOVB		#INIT_LCD4,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			
			; DISPLAY OFF, 2 4BIT WRITES NEEDED AGAIN.
			; 4 MSB.
			MOVB		#INIT_LCD5,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			; 4 LSB.
			MOVB		#INIT_LCD6,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			
			; DISPLAY CLEAR, 2 4BIT WRITES NEEDED.
			; 4 MSB.
			MOVB		#INIT_LCD7,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			; 4 LSB.
			MOVB		#INIT_LCD8,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			
			;ENTRY MODE = INCREMENT, CURSOR MOVE, 2 4-BIT WIRTES NEEDED.
			; 4 MSB.
			MOVB		#INIT_LCD9,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			; 4 LSB.
			MOVB		#INIT_LCD10,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			
			; DISPLAY ON, CURSOR ON, BLINK ON, 2 4-BIT WRITES NEEDED.
			; 4 MSB.
			MOVB 		#INIT_LCD11,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			; 4 LSB.
			MOVB		#INIT_LCD12,PORTK
			JSR			ENABLE_PULSE
			LDD			#$01
			JSR			DELAY
			
			RTS
			
			
ENABLE_PULSE
			BSET		PORTK,ENABLE		; SET PORTK ENABLE BIT HIGH.
			
			; HOLD ENABLE HIGH FOR > 230 NSEC
			; BCLR TAKES 4 CYCLES BEFORE ENABLE BIT GOES LOW.
			;  -ADD A COUPLE NOPS TO GIVE 6 CYCLES TOTAL (240 NSEC)
			NOP 
			NOP
			
			BCLR		PORTK,ENABLE		; TAKE ENABLE BACK TO LOW.
			
			; THEN WAIT SOME MORE.
			; FUNCTIONS TAKE AT LEAST 40 USEC TO COMPLETE.
			; -SO FOR CONVENIENCE, USE 1 MSEC DELAY.
			LDD			#$01
			JSR			DELAY
			
			RTS

			
DELAY		



















